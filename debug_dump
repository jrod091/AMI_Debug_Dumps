#!/usr/bin/perl
#######################################################################################################################
# New Debug Dump Extraction & Analysis                                                                                #
# Author: Jorge Rodriguez                                                                                             #
# Copyright American Megatrends, Inc 2015                                                                             #
# ------------------------------------------------------------------------------------------------------------------- #
#                                                                                                                     #
# This script is broken down into 3 sections:                                                                         #
#    - FTP Pull                           (ftp_pull)                                                                  #
#    - Debug Dump Extraction              (dd_extract)                                                                #
#    - Debug Dump Analysis                (dd_analysis)                                                               #
# Descriptions of each can be found further down in the sript. This script will run through each section and will     #
# allow the user to analyze a freshly updated debug dump. These scripts are modular and can be executed seperately by #
# running the script indicated in paraenthese above.                                                                  #
#######################################################################################################################

#######################################################################################################################
# Change Log:                                                                                                         #
# ------------------------------------------------------------------------------------------------------------------- #
# 09/11/2015 - Intial release                                                                                         #
# 10/09/2015 - Add debugging and fix bug in extraction section that wasn't creating base directory for debug dump     #
# 10/20/2015 - Add error checking for all system calls and redo Success/Failure prints                                #
# 06/15/2016 - Reconfigure 2.7 extraction section                                                                     #
# 08/12/2016 - Add support for password encrypted debug dumps														  #
# 08/12/2016 - Fixed incompatibilities with Christy Stack in extraction section										  #
# 08/12/2016 - Import changes to Analysis script, which enhnaces analysis within									  #
# 08/23/2016 - Rework Analysis section with separate calls to other scripts depending on current unit. This also      #
#              fixes issue of arrays not being properly reset and seeing multiples of volumes/disks/interfaces when   #
#              run across multiple debug dumps at once.                                                               #
#######################################################################################################################

## Debug variable - 0 = disabled, 1 = enabled
$debug = 1;

use File::Path qw(make_path remove_tree);
use Net::FTP;
use Term::ANSIColor qw(:constants colored );
use Term::Size;
use Text::Wrap;
use Text::Table;
use Math::Round;

## Set insecure extract mode in order to be able to extract tar files
local $Archive::Tar::INSECURE_EXTRACT_MODE = 1;

## Get width of terminal
my $columns = Term::Size::chars *STDOUT{IO};
$Text::Wrap::columns = $columns;

## Check to make sure user wants to run through all of the script or just parts of it
print "This script is broken down into 3 main sections:\n";
print "   - FTP Pull                           (ftp_pull)\n";
print "   - Debug Dump Extraction & Analysis   (dd_extract, dd_analysis, dd_ex_an)\n";
print wrap("", "", "This script will run through each section and will allow you to analyze a freshly uploaded debug dump. These scripts are modular and can be executed seperately by running the script indicated in paranethese above.");
print "\nWould you like to run through this script? [Y/n]\n";
my $ans = <STDIN>;
if ( $ans =~ /n\n/i )
{
	die "Please run one of the scripts above.\n";
}

#######################################################################################################################
# FTP Pull Section                                                                                                    #
# ------------------------------------------------------------------------------------------------------------------- #
#                                                                                                                     #
# The section below will login to atl-ftp and show a list of customers currently found in the StorTrends share. From  #
# this list, the user will be able to pick a customer and then a check will commence for new debug dumps (.tgz format)#
# compared to what is currently found in the local directory found in the support share for that particular customer. #
#######################################################################################################################

## Months: 0 = Jan ... 11 = Dec
##   Days: 0 = Sun ...  6 = Sat

logger(__LINE__, "===============================================================================================") if ($debug);
## Setup variables for accessing FTP site
my $host = "ftpoem.ami.com";
logger(__LINE__, "Hostname is $host") if ($debug);
my $user = "debugdump\@stortrends";
logger(__LINE__, "User is $user") if ($debug);
my $pass = "CgndU7KF";
logger(__LINE__, "Password is $pass") if ($debug);
my $main_path = "/Access.Share/support/Debug_Dumps/";
logger(__LINE__, "Base path is $main_path") if ($debug);
logger(__LINE__, "Commencing script...") if ($debug);
logger(__LINE__, "vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv") if ($debug);

## Open connection to FTP site and login
my $f = Net::FTP->new($host, Debug =>0) or die "Can't open $host: $@\n";
logger(__LINE__, "Opening connection to $host...") if ($debug);
$f->login($user, $pass) or die "Can't login $user\n";
logger(__LINE__, "Logging in with $user and $pass...") if ($debug);

## Get a list of customer directories found on FTP site
my @customers = $f->ls;
logger(__LINE__, "List of customers:") if ($debug);
foreach $cus (@customers) 
{
	if ($cus !~ /\./) 
	{
		push(@Cus, $cus);
logger(__LINE__, "$cus") if ($debug);
	}
}

$num = scalar(@Cus);
$a = 0;
$b = 1;
$c = 2;
$d = 3;
$e = 4;
$g = 5;

logger(__LINE__, "Prompting user for customer selection...") if ($debug);
print "Please choose the customer you would like to pull from: [1-$num]\n";

## List out customers that were found in order to choose which customer to pull new debug dumps from
while ($a < $num) 
{
	if (defined($Cus[$e]))
	{
		printf "%-4s %-28s %-4s %-28s %-4s %-28s %-4s %-28s %-4s %-28s\n", "$b)", $Cus[$a], "$c)", $Cus[$b], "$d)", $Cus[$c], "$e)", $Cus[$d], "$g)", $Cus[$e];
	}
	elsif (defined($Cus[$d]))
	{
		printf "%-4s %-28s %-4s %-28s %-4s %-28s %-4s %-28s\n", "$b)", $Cus[$a], "$c)", $Cus[$b], "$d)", $Cus[$c], "$e)", $Cus[$d];
	}
	elsif (defined($Cus[$c]))
	{
		printf "%-4s %-28s %-4s %-28s %-4s %-28s\n", "$b)", $Cus[$a], "$c)", $Cus[$b], "$d)", $Cus[$c];
	}
	elsif (defined($Cus[$b])) 
	{
		printf "%-4s %-28s %-4s %-28s\n", "$b)", $Cus[$a], "$c)", $Cus[$b];
	} 
	else 
	{
		printf "%-4s %-28s\n", "$b)", $Cus[$a];
	}
	$a = $a + 5;
	$b = $b + 5;
	$c = $c + 5;
	$d = $d + 5;
	$e = $e + 5;
	$g = $g + 5;

}

chomp($ans = <STDIN>);
$dir = $Cus[$ans-1];
logger(__LINE__, "Selection is $dir") if ($debug);

## Set path to customer's local directory
$localdir = $main_path . $dir . "/";
logger(__LINE__, "Local directory set as $localdir") if ($debug);

## Create customer's local directory if not found
if (! -d $localdir)
{
logger(__LINE__, "$localdir does not exist, creating...") if ($debug);
	make_path($localdir);
}

## Get list of local debug dumps currently found in customers' directory
my @tars = `ls ${localdir}*debug\*gz 2>/dev/null`;


my ($check_hr, $check_mday, $check_month, $check_yr, $check_dst) = (0,0,0,0,0);
	
foreach $tar (@tars) 
{
logger(__LINE__, "-_-_-_-_-_-_-_-_-_-_-_-_-") if ($debug);

	chomp($tar);
logger(__LINE__, "Current tar is $tar") if ($debug);
	my $local_dd_epoch = (stat($tar))[9];
logger(__LINE__, "Epoch of $tar is $local_dd_epoch") if ($debug);
	my ($Sec, $Min, $Hour, $Mday, $Month, $Year, $isDST) = (localtime($local_dd_epoch))[0,1,2,3,4,5,8];
	
	$Year += 1900;
logger(__LINE__, "Timestamp for $tar is $Month/$Mday/$Year $Hour:$Min:$Sec") if ($debug);
	
	## Set timestamp of local debug dump
	if ($Year >= $check_yr)
	{
		$lyear = $Year;
		$lmonth = $Month;
		$check_yr = $lyear;
		$check_month = $lmonth;
logger(__LINE__, "Year of local debug dump is $check_yr") if ($debug);
		
		if ($isDST != $check_dst)
		{
			$lisDST = $isDST;
			$check_dst = $lisDST;
		}
		
		if ($Month >= $check_month)
		{
			$lmonth = $Month;
			$check_month = $lmonth;
logger(__LINE__, "Month of local debug dump is $check_month") if ($debug);

			if ($Mday >= $check_mday)
			{
				$lmday = $Mday;
				$lhour = $Hour;
				$lmin = $Min;
				$lsec = $Sec;
				$check_mday = $lmday;
			}
		}
	}
logger(__LINE__, "_-_-_-_-_-_-_-_-_-_-_-_-_") if ($debug);
}

## Enter the customer's directory on the FTP site and get list of current debug dumps found
logger(__LINE__, "Changing directory in FTP to $dir...") if ($debug);
$f->cwd($dir) or die "Can't cwd to $dir\n";
my @files = $f->ls;

my $i = 0;
my $check = 0;

foreach $file (@files) 
{
	if ($file =~ /^debug/ and $file =~ /\.gz$/) 
	{
logger(__LINE__, "^^^^^^^^^^^^^^^^^^^^^^^^^") if ($debug);
logger(__LINE__, "Current file is $file") if ($debug);

		## Get epoch of each debug dump
		my $dd_epoch = $f->mdtm($file);
logger(__LINE__, "Epoch of $file is $dd_epoch") if ($debug);

		## Get timestamp of each debug dump
		my ($sec, $min, $hour, $mday, $month, $year, $isdst) = (localtime($dd_epoch))[0,1,2,3,4,5,8];
		$year += 1900;
logger(__LINE__, "Timestamp of $file is $month/$mday/$year $hour:$min:$sec") if ($debug);
	
		## Compare timestamps to see if debug dumps are newer and pull them if so
		if ($year > $lyear) 
		{
logger(__LINE__, "$year is greater than $lyear, therefore more recent, pulling $file...") if ($debug);
			print "Pulling ", BLUE, $file, RESET, "...";
			$f->binary();
			$f->get($file,$localdir.$file) or die "Can't get $file from $dir\n";
			my_print("Pulling $file...");
			$Files[$i] = $file;
			$check++;
			$i++;
		} 
		elsif ($year == $lyear) 
		{
			if ($month > $lmonth) 
			{
logger(__LINE__, "Years are equal, but $month is greater than $lmonth, therefore more recent, pulling $file...") if ($debug);
				print "Pulling ", BLUE, $file, RESET, "...";
				$f->binary();
				$f->get($file,$localdir.$file) or die "Can't get $file from $dir\n";
				my_print("Pulling $file...");
				$Files[$i] = $file;
				$check++;
				$i++;
			} 
			elsif ($month == $lmonth) 
			{
				if ($mday > $lmday) 
				{
logger(__LINE__, "Years and months are equal, but $mday is greater than $lmday, therefore more recent, pulling $file...") if ($debug);
					print "Pulling ", BLUE, $file, RESET, "...";
					$f->binary();
					$f->get($file,$localdir.$file) or die "Can't get $file from $dir\n";
					my_print("Pulling $file...");
					$Files[$i] = $file;
					$check++;
					$i++;
				} 
				elsif ($mday == $lmday) 
				{
					if ($hour > $lhour) 
					{
logger(__LINE__, "Years, months and days are equal, but $hour is greater than $lhour, therefore more recent, pulling $file...") if ($debug);
						print "Pulling ", BLUE, $file, RESET, "...";
						$f->binary();
						$f->get($file,$localdir.$file) or die "Can't get $file from $dir\n";
						my_print("Pulling $file...");
						$Files[$i] = $file;
						$check++;
						$i++;
					} 
					elsif ($hour == $lhour) 
					{
						if ($min > $lmin) 
						{
logger(__LINE__, "Years, months, days, and hours are equal, but $min is greater than $lmin, therefore more recent, pulling $file...") if ($debug);
							print "Pulling ", BLUE, $file, RESET, "...";
							$f->binary();
							$f->get($file,$localdir.$file) or die "Can't get $file from $dir\n";
							my_print("Pulling $file...");
							$Files[$i] = $file;
							$check++;
							$i++;
						} 
						elsif ($min == $lmin) 
						{
							if ($sec > $lsec) 
							{
logger(__LINE__, "Years, months, days, hours and minutes are equal, but $sec is greater than $lsec, therefore more recent, pulling $file...") if ($debug);
								print "Pulling ", BLUE, $file, RESET, "...";
								$f->binary();
								$f->get($file,$localdir.$file) or die "Can't get $file from $dir\n";
								my_print("Pulling $file...");
								$Files[$i] = $file;
								$check++;
								$i++;
							}
						}
					}
				}
			}
		}
	}

$z = $i -1 if ($debug);
logger(__LINE__, "Current count is $z and file is $Files[$z]") if ($debug);
logger(__LINE__, "vvvvvvvvvvvvvvvvvvvvvvvvv") if ($debug);
}

if ($check == 0)
{
logger(__LINE__, "No new files, Exiting...") if ($debug);
logger(__LINE__, "===============================================================================================") if ($debug);
	print "No files to pull. Exiting...\n";
	exit 0;
}

#######################################################################################################################
# Debug Dump Extraction Section                                                                                       #
# ------------------------------------------------------------------------------------------------------------------- #
#                                                                                                                     #
# The section below will extract all debug dumps pulled from the FTP Pull Section above. The following information    #
# will be executed:                                                                                                   #
# 1. extract events_txt.gz to events.txt                                                                              #
# 2. extract latest messages.gz to messages.txt                                                                       #
# 3. extract dvmstat.tgz to dvmstat/ and add proper .swf files                                                        #
# 4. extract info file from each volume                                                                               #
# 5. if 2.8v3.00+, extract stats file from each volume                                                                #
# 6. extract stats file from storage pool                                                                             #
#######################################################################################################################

MAIN: foreach $file (@Files) {
	## Set variables
logger(__LINE__, "*************************") if ($debug);
logger(__LINE__, "\$file is $file") if ($debug);
	my $fpath = $localdir.$file;
logger(__LINE__, "\$fpath is $fpath") if ($debug);
	my $tmp = (split /\./, $file)[0];
logger(__LINE__, "\$tmp is $tmp") if ($debug);
	my $debug_dir = $localdir.$tmp;
logger(__LINE__, "\$debug_dir is $debug_dir") if ($debug);
	
	## Check to see if the debug dump file is from a dual controller unit
	if($fpath =~ /lc/i || $fpath =~ /rc/i) {
	
		print "Extracting debug dump ", BLUE $file, RESET, "...";

		## Make directory for debug dump
		make_path($debug_dir);
		
		## Extract debug dump to debug dump directory
		$err = `tar -zxf $fpath -C $debug_dir 2>&1`;
		#die "$err\n";
		
		if ($err =~ /error/i)
		{
			if ($err !~ /httpd_error_log/i)
			{
				system("unzip -P itx_unlock_ami $fpath -d $debug_dir >> /dev/null");
				system("tar -zxf $debug_dir/opt/Mono/Storage/dvmstat/Dump/$file -C $debug_dir");
				system("rm -rf $debug_dir/opt/");
			}
		}
		
		$txt = "Extracting debug dump $file...";
		$rem = $columns - length($txt) + 9;
		printf("%${rem}s\n",colored('Success!', 'GREEN'));
		print "Extracting dvmstat directory...";
		
		#cmd_chk("Extracting debug dump $file...", "tar -zxf $fpath -C $debug_dir >> /dev/null 2>&1");

		#my_print("Extracting debug dump $file...","Extracting dvmstat directory...");
		
	if ( -d "$debug_dir/opt/Mono/Storage/dvmstat/Dump/clidump/" )
	{ # path before Christy
		$dump_path = $debug_dir . "/opt/Mono/Storage/dvmstat/Dump/clidump/";
	} 
	else { # path in Christy
		$dump_path = $debug_dir . "/clidump/";
	}
logger(__LINE__, "debug dump path is $dump_path") if ($debug);

	## Set path variable for serverinfo.txt
	$info = $dump_path . "serverinfo.txt";

	## Get revision number of system in order to know which resources to copy
	chomp($ver = `grep --color=never Version $info | awk '{print \$5}'`);
	chomp($rev = `grep --color=never Revision $info | awk '{print \$5}'`);
	
	## Set dvmstat, events, and messages variables
	$arc1 = "dvmstat.tgz";
	$dir1 = "dvmstat";
	if ($ver =~ /5/ and $rev ge "1.1")	{ $arc2 = "events.txt.gz"; }
	else								{ $arc2 = "events_txt.gz"; }
	$arc3 = "messages.gz";
	$arc4 = "log.gz";

	## Add dvmstat, events, and messages variables to path
	$a = $dump_path . $arc1;
	$b = $dump_path . $arc2;
	$c = $dump_path . $arc3;
	$d = $dump_path . $dir1;
	$e = $dump_path . "events_txt";
	$f = $dump_path . "events.txt";
	$g = $dump_path . "messages";
	$h = $dump_path . "messages.txt";

	## Make directory for dvmstat
logger(__LINE__, "Making path for $d...") if ($debug);
	make_path($d);
	
	## Extract dvmstat.tgz to dvmstat directory
logger(__LINE__, "Extracting dvmstat.tgz...") if ($debug);
	cmd_chk("Extracting dvmstat directory...","tar -xzf $a -C $d >> /dev/null 2>&1");

	my_print("Extracting dvmstat directory...","Decompressing event log...");
	
	## Extract event log
logger(__LINE__, "Extracting event log...") if ($debug);
	cmd_chk("Decompressing event log...","gzip -df $b >> /dev/null 2>&1");

	## Move events_txt to events.txt for easier opening options in Windows
logger(__LINE__, "Moving events_txt to events.txt...") if ($debug);
	if ($rev ne "1.2") { system "mv $e $f >> /dev/null 2>&1"; }

	my_print("Decompressing event log...","Decompressing latest messages...");

	## Extract messages
logger(__LINE__, "Extracting messages...") if ($debug);
	cmd_chk("Decompressing latest messages...","gzip -df $c >> /dev/null 2>&1");

	## Move messages to messages.txt for easier opening options in Windows
logger(__LINE__, "Moving messages to messages.txt...") if ($debug);
	system "mv $g $h >> /dev/null 2>&1";

	my_print("Decompressing latest messages...","Adding proper files into dvmstat...");

	## Set path variables for xml, Storage, and dvmstat within dvmstat directory
	$xml = $dump_path . "dvmstat/opt/Mono/xml/";
	$Storage = $dump_path . "dvmstat/opt/Mono/Storage/";
	$dvmstat = $Storage . "dvmstat/";

	## Create path variables for source paths to .swf files and resources for both 2.8v2.14, 2.8v3+, and 5.0v1.0
	$v501 = "/Access.Share/support/MT_Debug_Flash/50v1/Mono/";
	$v283 = "/Access.Share/support/MT_Debug_Flash/28v3/Mono/";
	$v282 = "/Access.Share/support/MT_Debug_Flash/28v2/Mono/";

	## If unit is on 5.0v1.0
	if($rev eq "1.0" or $rev eq "1.1" or $rev eq "1.2") {
logger(__LINE__, "SAN is on Christy stack") if ($debug);
		
		## Create path variables for xml and Storage from source path
		$XML = $v501 . "xml/";
		$STORAGE = $v501 . "Storage/";
		
		## Get all .swf files from source path
		@swf = `ls $STORAGE | grep --color=never swf`;
		
		## Set path to iscsistats.xml from source path
		$iscsistats = $STORAGE . "dvmstat/iscsistats.xml";
		
		## Make xml directory in local dvmstat directory
logger(__LINE__, "Making $xml...") if ($debug);
		make_path($xml);
		
		## Copy xml directory from source path to local path
logger(__LINE__, "Copying $XML to $dump_path/dvmstat/opt/Mono/...") if ($debug);
		system "cp -r $XML $dump_path/dvmstat/opt/Mono/ >> /dev/null 2>&1";

		## Copy .swf files from source path to local path
logger(__LINE__, "Copying .swf files...") if ($debug);
		foreach $swf (@swf) {
			chomp($swf);
			system "cp $STORAGE$swf $Storage >> /dev/null 2>&1";
		}

		## Copy iscsistats.xml from source path to local path
logger(__LINE__, "Copying $iscsistats to $dvmstat...") if ($debug);
		system "cp $iscsistats $dvmstat >> /dev/null 2>&1";
		
		##Set path to containeroutput.txt
		$con = $dump_path . "containeroutput.txt";
		
		## Get storage pool name
		chomp($sp = `grep --color=never Name $con | awk '{print \$4}'`);
		
		## Create containers.xml and volumes.xml
logger(__LINE__, "Creating containers.xml and volumes.xml...") if ($debug);
		open(FILE, ">>$dump_path/dvmstat/opt/Mono/Storage/dvmstat/containers.xml");
			print FILE "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
			print FILE "<set>\n";
			print FILE "\t<string>$sp\_local<\/string>\n";
			print FILE "<\/set>";
		close(FILE);
		
		open(FILE, ">>$dump_path/dvmstat/opt/Mono/Storage/dvmstat/volumes.xml");
			print FILE "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
			print FILE "<set>\n";
			@name = `grep --color=never -i -e "volume name" ${dump_path}volumeoutput.txt | awk '{print \$4}'`;
			foreach $name (@name) {
				$name =~ s/^\s+|\s+$//g;
				print FILE "\t<string>$sp\_$name\_local<\/string>\n";
			}
			print FILE "<\/set>";
			close(FILE);
	
	  ## If unit is on 2.8v3.0 or 3.1
	} 
	elsif ($rev eq "3.0" or $rev eq "3.1" or $rev eq "3.2") {
logger(__LINE__, "SAN is on 2.8 stack (3+)") if ($debug);

		## Create path variables for xml and Storage from source path
		$XML = $v283 . "xml/";
		$STORAGE = $v283 . "Storage/";
		
		## Get all .swf files from source path
		@swf = `ls $STORAGE | grep --color=never swf`;
		
		## Set path to iscsistats.xml from source path
		$iscsistats = $STORAGE . "dvmstat/iscsistats.xml";
		
		## Make xml directory in local dvmstat directory
		make_path($xml);
		
		## Copy xml directory from source path to local path
logger(__LINE__, "cp -r $XML  $dump_path/dvmstat/opt/Mono/ >> /dev/null 2>&1") if ($debug);
		system "cp -r $XML $dump_path/dvmstat/opt/Mono/ >> /dev/null 2>&1";

		## Copy .swf files from source path to local path
		foreach $swf (@swf) {
			chomp($swf);
logger(__LINE__, "Current file is $swf") if ($debug);
			system "cp $STORAGE$swf $Storage >> /dev/null 2>&1";
		}

		## Copy iscsistats.xml from source path to local path
		system "cp $iscsistats $dvmstat >> /dev/null 2>&1";

	  ## If unit is on 2.8v2.14 or earlier
	} 
	else {
logger(__LINE__, "SAN is on 2.8 stack, 2.14 or earlier") if ($debug);

		## Create path variables for xml and Storage from source path
		$XML = $v282 . "xml/";
		$STORAGE = $v282 . "Storage/";
		
		## Get all .swf files from source path
		@swf = `ls $STORAGE | grep --color=never swf`;
		
		## Make xml directory in local dvmstat directory
		system "mkdir $xml >> /dev/null 2>&1";
		
		## Copy xml directory from source path to local path
		system "cp -r $XML $dump_path/dvmstat/opt/Mono/ >> /dev/null 2>&1";

		## Copy .swf files from source path to local path
		foreach $swf (@swf) {
			chomp($swf);
			system "cp $STORAGE$swf $Storage >> /dev/null 2>&1";
		}

	}

	my_print("Adding proper files into dvmstat...","Extracting info files for each volume...");
	
	##Set path to containeroutput.txt
	$con = $dump_path . "containeroutput.txt";

	## Get storage pool name
	chomp($sp = `grep --color=never Name $con | awk '{print \$4}'`);
	
	## Set path to log.gz file
	$log = $dump_path . "proc/dvm/$sp/log.gz";
	
	## Set path to stats.gz for $SP
	$stat = $dump_path . "proc/dvm/$sp/stats.gz";

	## Set path to info.gz files
	$proc = $dump_path . "proc/dvm/$sp/*/info.gz";
	
	## Set path to info.gz file for $SP
	$spInfo = $dump_path . "proc/dvm/$sp/info.gz";
	
	## Set path to dvmstat.gz file for system
	$spDvmstat = $dump_path . "proc/dvm/dvmstat.gz";
	
	## Set path to dmstat.gz file for $SP
	$dmstats = $dump_path . "proc/dvm/$sp/dmstats.gz";

	## Get list of all info.gz files in proc
	chomp(@info = `ls $proc`);

	## Run through loop for each file in the info array
	foreach $info (@info) {
logger(__LINE__, "Extracting $info...") if ($debug);

		## Set base path for where info.gz will be extracted
		@split3 = split /\./, $info;
		$base = $split3[1];
		$Base = "/Access." . $base;
		$txt = $Base . ".txt";

		## Extract info
		system "gzip -df $info >> /dev/null 2>&1";

		## Move info to info.txt for easier opening options in Windows
		system "mv $Base $txt >> /dev/null 2>&1";
	}

	my_print("Extracting info files for each volume...");

	## If unit is on 2.8v3+ or Christy
	if ($rev eq "3.0" or $rev eq "3.1" or $rev eq "3.2" or $rev eq "1.0" or $rev eq "1.1" or $rev eq "1.2") 
	{
logger(__LINE__, "SAN is on 2.8v3+, extracting stat files...") if ($debug);

		print "Extracting stats files for each volume...";
		
		## Set path to stats.gz files in proc
		$stats = $dump_path . "proc/dvm/$sp/*/stats.gz";
		
		## Get list of all stats.gz files in proc
		chomp(@stats = `ls $stats`);
		
		foreach $stat (@stats) {
logger(__LINE__, "Extracting $stat...") if ($debug);
			
			## Set base path for where stats.gz will be extracted
			@split4 = split /\./, $stat;
			$base = $split4[1];
			$Base = "/Access." . $base;
			$txt = $Base . ".txt";
			
			## Extract stats
			system "gzip -df $stat >> /dev/null 2>&1";
			
			## Move stats to stats.txt for easier opening options in Windows
			system "mv $Base $txt >> /dev/null 2>&1";
		}
		
		my_print("Extracting stats files for each volume...");
	}
	
logger(__LINE__, "Extracting log file...") if ($debug);
	print "Extracting log file...";
	
	cmd_chk("Extracting log file...","gzip -df $log 2>/dev/null");
	my_print("Extracting log file...","Extracting container stats file...");	
	cmd_chk("Extracting container stats file...","gzip -df $stat >> /dev/null 2>&1");	
	my_print("Extracting container stats file...","Extracting container info file...");	
	cmd_chk("Extracting container info file...","gzip -df $spInfo >> /dev/null 2>&1");	
	my_print("Extracting container info file...", "Extracting container dvmstat file...");	
	cmd_chk("Extracting container dvmstat file...","gzip -df $spDvmstat >> /dev/null 2>&1");
	
	if ($rev eq "3.2" or $rev eq "1.0" or $rev eq "1.1" or $rev eq "1.2")
	{
		my_print("Extracting container dvmstat file...", "Extracting container dmstats file...");
		cmd_chk("Extracting container dmstats file...","gzip -df $dmstats >> /dev/null 2>&1");
		my_print("Extracting container dmstats file...");
	}
	else
	{
		my_print("Extracting container dvmstat file...");
	}

logger(__LINE__, "Changing permissions of $debug_dir...") if ($debug);
	system "chmod -R 777 $debug_dir";
	
	}
	else {
		## Get debug dump name
		@dd = split /\./, $dumps[$chc];

		print "Extracting debug dump $file...";

		## Make directory for debug dump
		make_path($debug_dir);

		## Extract debug dump to debug dump directory
		cmd_chk("Extracting debug dump $file...", "tar -zxf $fpath -C $debug_dir >> /dev/null 2>&1");

		print GREEN, "\t\tSuccess!\n", RESET, "Extracting dvmstat directory...";

		## Set path variable for location of all files in debug dump
		$dump_path = $debug_dir . "/opt/Mono/Storage/dvmstat/Dump/clidump/";

		## Set dvmstat, events, and messages variables
		$arc1 = "dvmstat.tgz";
		$dir1 = "dvmstat";
		$arc2 = "events_txt.gz";
		$arc3 = "messages.gz";

		## Add dvmstat, events, and messages variables to path
		$a = $dump_path . $arc1;
		$b = $dump_path . $arc2;
		$c = $dump_path . $arc3;
		$d = $dump_path . $dir1;
		$e = $dump_path . "events_txt";
		$f = $dump_path . "events.txt";
		$g = $dump_path . "messages";
		$h = $dump_path . "messages.txt";

		## Make directory for dvmstat
logger(__LINE__, "Making path for $d...") if ($debug);
		make_path($d);

		## Extract dvmstat.tgz to dvmstat directory
logger(__LINE__, "Extracting dvmstat.tgz...") if ($debug);
		cmd_chk("Extracting dvmstat directory...","tar -xzf $a -C $d >> /dev/null 2>&1");

		my_print("Extracting dvmstat directory...","Decompressing event log...");

		## Extract event log
logger(__LINE__, "Extracting event log...") if ($debug);
		cmd_chk("Decompressing event log...","gzip -df $b >> /dev/null 2>&1");

		## Move events_txt to events.txt for easier opening options in Windows
logger(__LINE__, "Moving events_txt to events.txt...") if ($debug);
		system "mv $e $f >> /dev/null 2>&1";

		my_print("Decompressing event log...","Decompressing latest messages...");

		## Extract messages
logger(__LINE__, "Extracting messages...") if ($debug);
		cmd_chk("Decompressing latest messages...","gzip -df $c >> /dev/null 2>&1");

		## Move messages to messages.txt for easier opening options in Windows
logger(__LINE__, "Moving messages to messages.txt...") if ($debug);
		system "mv $g $h >> /dev/null 2>&1";

		my_print("Decompressing latest messages...","Adding proper files into dvmstat...");
	
		## Create path variable for location that .swf files need to go to in 2.7
		$Storage = $path . "dvmstat/opt/Mono/Storage/";

		## Create path variables for source paths to .swf files and resources for 2.7
		$v27 = "/Access.Share/support/MT_Debug_Flash/27/";
	
		## Get all .swf files from source path
		@swf = `ls $v27 | grep --color=never swf`;

		## Copy .swf files from source path to local path
		foreach $swf (@swf) {
			chomp($swf);
			system "cp $STORAGE$swf $Storage >> /dev/null 2>&1";
		}

		print GREEN, "\t\tSuccess!\n", RESET;
	}
	
#######################################################################################################################
# Debug Dump Analysis Section                                                                                         #
# ------------------------------------------------------------------------------------------------------------------- #
#                                                                                                                     #
# The section below will run an analysis on all debug dumps pulled from the FTP Pull Section above. The following will#
# be captured:                                                                                                        #
#  1. Volume Names in System                                                                                          #
#  2. Volume Provisioned Size                                                                                         #
#  3. Volume Provision Type                                                                                           #
#  4. Volume Tier Residency                                                                                           #
#  5. Volume SSD Cache Profile                                                                                        #
#  6. Drive Type Latencies (SSD, SAS, NL-SAS)                                                                         #
#  7. Read, Write, & Total MB/s of each Volume                                                                        #
#  8. Used Capacity of each Volume                                                                                    #
#  9. SSD Cache capacities (valid reads, dirty writes)                                                                #
# 10. Get Tier Allocation Blocks Written Information                                                                  #
# 11. Get Drive SMART information                                                                                     #
#######################################################################################################################

logger(__LINE__,"`````````````````````````") if ($debug);
	$ProdDef = $dump_path . "ProdDef.txt";												logger(__LINE__,"ProdDef is $ProdDef") if ($debug);
	$productName = `grep -i --color=never 'distro' $ProdDef`;							logger(__LINE__,"ProductName is $productName") if ($debug);
	chomp($ssd = `grep --color=never Tier $dump_path/license.txt | awk '{print \$3}'`);	logger(__LINE__,"cache setting is $ssd") if ($debug);
	$spInfo =~ s/.gz//;																	logger(__LINE__,"spInfo is $spInfo") if ($debug);
	$spDvmstat =~ s/.gz//;																logger(__LINE__,"spDVMstat is $spDvmstat") if ($debug);
	$dmstats =~ s/.gz//;																logger(__LINE__,"dmstats is $dmstats") if ($debug);
	$ssdAVL = "/Access.Share/support/MT_Debug_Flash/ssd_avl_list.csv";					logger(__LINE__,"AVL is at $ssdAVL") if ($debug);
	$iscsiSessionsFile = $dump_path."/iscsi/proc/scsi_target/iscsi_target/sessions";	logger(__LINE__, "iscsiSessionsFile is at $iscsiSessionsFile") if ($debug);
	
	if ($productName =~ /FC11/ and $ssd eq "Disabled")
	{
logger(__LINE__,"Starting 3400i analysis...") if ($debug);
logger(__LINE__,"passing following variables: \n\tfile - $file\n\tdump_path - $dump_path\n\tinfo - $info\n\tdebug_dir - $debug_dir\n\tsp - $sp\n\tdebug - $debug\n\tspDvmstat - $spDvmstat") if ($debug);
		system("Analysis3400 $file $dump_path $info $debug_dir $sp $debug $spDvmstat");
	}
	elsif ($productName =~ /FC11/ and $ssd eq "Enabled")
	{
logger(__LINE__,"Starting 3500i analysis...") if ($debug);
logger(__LINE__,"passing following variables: \n\tfile - $file\n\tdump_path - $dump_path\n\tinfo - $info\n\tdebug_dir - $debug_dir\n\tsp - $sp\n\tdebug - $debug\n\tspInfo - $spInfo\n\tspDvmstat - $spDvmstat\n\tdmstats - $dmstats\n\tssdAVL - $ssdAVL\n\tcon - $con\n\tiscsiSessionsFile - $iscsiSessionsFile") if ($debug);
		system("Analysis3500 $file $dump_path $info $debug_dir $sp $debug $spInfo $spDvmstat $dmstats $ssdAVL $con $iscsiSessionsFile");
	}
	else
	{
logger(__LINE__,"Starting Christy analysis...") if ($debug);
logger(__LINE__,"passing following variables: \n\tfile - $file\n\tdump_path - $dump_path\n\tinfo - $info\n\tdebug_dir - $debug_dir\n\tsp - $sp\n\tdebug - $debug\n\tspDvmstat - $spDvmstat\n\tdmstats - $dmstats\n\tssdAVL - $ssdAVL") if ($debug);
		system("AnalysisChristy $file $dump_path $info $debug_dir $sp $debug $spInfo $spDvmstat $dmstats $ssdAVL $iscsiSessionsFile");
	}
	
logger(__LINE__, "===============================================================================================") if ($debug);
}

#---------------------------------------------------------------------------------------------------------------------#

## Debug subroutine
sub logger
{
	($line,$msg) = @_;
	
	@months = qw( JAan Fab Mar Apr May Jun Jul Aug Sep Oct Nov Dec );
	@days = qw( Sun Mon Tue Wed Thu Fri Sat );
	
	($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime();
	$year += 1900;
	
	open(LOG, ">>", "/root/debugDump.log");
	print LOG "debug_dump: Line $line $months[$mon]/$mday/$year $hour:$min:$sec - $msg\n";
	close(LOG);
}

## Failed command check subroutine
sub cmd_chk
{
logger(__LINE__, "+++++++++++++++++++++++++") if ($debug);
	($txt,$cmd) = @_;
logger(__LINE__, "Text is $txt") if ($debug);
logger(__LINE__, "Command is $cmd") if ($debug);

	$rem = $columns - length($txt) + 9;
	
logger(__LINE__, "Checking command...") if ($debug);
	if (system($cmd) != 0)
	{
logger(__LINE__, "Command failed") if ($debug);
		printf("%${rem}s\n",colored('Failure!', 'RED'));
logger(__LINE__, "+++++++++++++++++++++++++") if ($debug);
		next;
	}
logger(__LINE__, "+++++++++++++++++++++++++") if ($debug);
}

## Success print subroutine
sub my_print
{
logger(__LINE__, "~~~~~~~~~~~~~~~~~~~~~~~~~") if ($debug);
	($txt,$nxt) = @_;
logger(__LINE__, "Text is $txt") if ($debug);
logger(__LINE__, "Next text is $nxt") if ($debug);

	$rem = $columns - length($txt) + 9;

logger(__LINE__, "Printing 'Success'...") if ($debug);
	printf("%${rem}s\n",colored('Success!', 'GREEN'));
	print $nxt if ($nxt ne '');
logger(__LINE__, "~~~~~~~~~~~~~~~~~~~~~~~~~") if ($debug);
}

## Find unique entries in array
sub uniq {
  my %seen;
  return grep { !$seen{$_}++ } @_;
}
