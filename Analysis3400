#!/usr/bin/perl
use File::Path qw(make_path remove_tree);
use Net::FTP;
use Term::ANSIColor qw(:constants colored );
use Term::Size;
use Text::Wrap;
use Text::Table;
use Math::Round;

$file = $ARGV[0];
$dump_path = $ARGV[1];
$info =  $ARGV[2];
$debug_dir = $ARGV[3];
$sp = $ARGV[4];
$debug = $ARGV[5];
$spDvmstat = $ARGV[6];

print "Beginning analysis of ", BLUE, $file, RESET, "...\n";

## Get system information
chomp($serverName = `grep --color=never Name $info | awk '{print \$4}'`);
chomp($ver = `grep --color=never Version $info | awk '{print \$5}'`);
chomp($rev = `grep --color=never Revision $info | awk '{print \$5}'`);

my $analysis_dir = $debug_dir . "/" . "analysis";
## Make directory for debug dump analysis
if ( ! -d $analysis_dir)
{
	make_path($analysis_dir);
}

## Path variables
$path1 = $dump_path . "dvmstat/opt/Mono/Storage/dvmstat/ld_stats/";
$path2 = $dump_path . "dvmstat/opt/Mono/Storage/dvmstat/perf_stats/";
$path3 = $dump_path . "dvmstat/opt/Mono/Storage/dvmstat/space_stats/";
$path4 = $dump_path . "dvmstat/opt/Mono/Storage/dvmstat/ilm_stats/";

## File variables
$file1 = $dump_path . "volumeoutput.txt";
 @ld_files = `ls $path1*md* | cut -d'/' -f19 | grep --color=never -v peak`;
@files_read = `ls $path2*_read.xml`;
@files_write = `ls $path2*_write.xml`;
@files_total = `ls $path2*_total.xml`;
@total = `ls $path3*_vol.xml`;

## Check license to determine 3400i/3500i
chomp($ssd = `grep --color=never Tier $dump_path/license.txt | awk '{print \$3}'`);

## Volume Information retrieval
@name = `grep --color=never -i -e "volume name" $file1 | awk '{print \$4}'`;
@size = `grep --color=never -i -e "volume size" $file1 | awk '{print \$6}'`;
@provision = `grep --color=never -i -e provision $file1 | awk '{print \$5}'`;
@number = `grep --color=never -i "number of volumes" $file1`;
@num = split /:/, $number[0];
chomp($number = $num[1]);

$i = 0;

undef(@Name);

while ($i < $number) {
	$Name[$i] = $name[$i];
	$Name[$i] =~ s/^\s+|\s+$//g;
	
	$Name[$i]{Size} = $size[$i];
	$Name[$i]{Size} =~ s/^\s+|\s+$//g;

	$Name[$i]{Provision} = $provision[$i];
	$Name[$i]{Provision} =~ s/^\s+|\s+$//g;

	$Name[$i]{Profile} = $profile[$i];
	$Name[$i]{Profile} =~ s/^\s+|\s+$//g;

	if ( !(($rev eq "3.0" || $rev eq "3.1" || $rev eq "3.2") and $ssd eq "Disabled") or $rev eq "1.0" || $rev eq "1.1")
	{
		$Name[$i]{ssd} = $ssd[$i];
		$Name[$i]{ssd} =~ s/^\s+|\s+$//g;
	}

	$i++;
}

$a = 0;
$b = 0;
$c = 0;
$d = 0;
$e = 0;

@Name = sort { lc($a) cmp lc($b) } @Name;

=pod
## LD Latency Retrieval
foreach $ld (@ld_files)
{
	$ld_file = $path1.$ld;
	@yval = `grep --color=never "<y>" $ld_file`;

	foreach (@yval)
	{
		$val = (split /[\>\<\s]+/, $_)[2];
		push @latency, $val;
	}
}

## Volume Performance Retrieval
$i = 0;

$files1 = scalar(@files_read);

while ($i < $files1) {

	@step1 = split /_/, $files_read[$i];
	$volume[$i] = $step1[3];

	$file_name4[$i] = $files_read[$i];
	$file_name5[$i] = $files_write[$i];
	$file_name6[$i] = $files_total[$i];

	$file4[$i] = $file_name4[$i];
	$file5[$i] = $file_name5[$i];
	$file6[$i] = $file_name6[$i];

	@yval1 = `grep --color=never "<y>" $file4[$i]`;
	@xval1 = `grep --color=never "<x>" $file4[$i]`;

	@yval2 = `grep --color=never "<y>" $file5[$i]`;
	@xval2 = `grep --color=never "<x>" $file5[$i]`;

	@yval3 = `grep --color=never "<y>" $file6[$i]`;
	@xval3 = `grep --color=never "<x>" $file6[$i]`;

	$num1 = scalar(@yval1);
	$num2 = scalar(@yval2);
	$num3 = scalar(@yval3);

	$y = 0;

	while ($y < $num1) {
		@test = split /\>/, $yval1[$y];
		@test1 = split /\</, $test[1];
		@test2 = split /\>/, $xval1[$y];
		@test3 = split /\</, $test2[1];
		$perf1[$y] = $test1[0];
		$time1[$y] = $test3[0];
		$y++;
	}

	$y = 0;

	while ($y < $num2) {
		@test = split /\>/, $yval2[$y];
		@test1 = split /\</, $test[1];
		@test2 = split /\>/, $xval2[$y];
		@test3 = split /\</, $test2[1];
		$perf2[$y] = $test1[0];
		$time2[$y] = $test3[0];
		$y++;
	}

	$y = 0;

	while ($y < $num3) {
		@test = split /\>/, $yval3[$y];
		@test1 = split /\</, $test[1];
		@test2 = split /\>/, $xval3[$y];
		@test3 = split /\</, $test2[1];
		$perf3[$y] = $test1[0];
		$time3[$y] = $test3[0];
		$y++;
	}
	$i++;
}
=cut

## Volume Used Capacity Retrieval

foreach $name (@Name)
{
	$tmpPath = $path3.$sp."_".$name."_vol.xml";
	
	@yval = `grep --color=never "<y>" $tmpPath`;
	
	$y = scalar(@yval);
	
	$name{space} = nearest(.01, (split /[\>\<]+/, $yval[$y - 1])[2]);
}

## Tier Allocation and Blocks Written Retrieval

##################################################
# Tiers                                          #
# ---------------------------------------------- #
# 0 - RESERVED                                   #
# 1 - RESERVED                                   #
# 2 - E-SSD in 3600i                             #
# 3 - C-SSD in 3600i; SSD Tier in 3500i          #
# 4 - 15k SAS RAID 10                            #
# 5 - 15k SAS RAID 5/6                           #
# 6 - NL-SAS RAID 10                             #
# 7 - NL-SAS RAID 5/6                            #
##################################################

logger(__LINE__, "*-*-*-*-*-*-*-*-*") if ($debug);
logger(__LINE__, "TIER INFORMATION ") if ($debug);
logger(__LINE__, "*-*-*-*-*-*-*-*-*") if ($debug);

$check = `ls ${dump_path}proc/dvm/$sp/$Name[0]/ | grep --color=never info`;

if ($check =~ /info.gz/) {
	cmd_chk("","gzip -dvf ${dump_path}proc/dvm/$sp/*/info.gz >> /dev/null 2>&1");
}

$check2 = `ls ${dump_path}proc/dvm/$sp/$Name[0]/ | grep --color=never stats`;

if ($check2 =~ /stats.gz/) {
	cmd_chk("","gzip -dvf ${dump_path}proc/dvm/$sp/*/stats.gz >> /dev/null 2>&1");
}

foreach $n (@Name)
{
logger(__LINE__, "Volume is:   $n") if ($debug);
	if ($rev eq "3.1" or $rev eq "3.2")
	{
		$statsFile = "${dump_path}proc/dvm/$sp/$n/stats.txt";
logger(__LINE__, "Stats File is:   $statsFile") if ($debug);
		open($fh, "<", $statsFile);

		while ($Line = <$fh>)
		{
			chomp($Line);
logger(__LINE__, "Current line is:   $Line") if ($debug);
			if ($Line =~ /T\[(\d+)\] INTMP\[(\d+)\] CVTMP\[(\d+)\]/)
			{
				$tier = $1;
					if    ($tier == 0 or $tier == 1 or $tier == 2) { next; }
					elsif ($tier == 3) { $tier = "SSD"; }
					elsif ($tier == 4 or $tier == 5) { $tier = "SAS"; }
					elsif ($tier == 6 or $tier == 7) { $tier = "NL-SAS"; }
logger(__LINE__, "Current Tier is:   $tier") if ($debug);
				$inPlaceTier = $2;
				$currentTier = $3;
				
				if ($inPlaceTier > 0 or $currentTier > 0)
				{
					push @TIERS, $tier;
					$INTMP{$n}{$tier} = $inPlaceTier;
logger(__LINE__, "INTMP for $n in $tier is:   $INTMP{$n}{$tier}") if ($debug);
				}
				else
				{
					if (defined($tiers{$n}{$tier})) { next; }
					$tiers{$n}{$tier} = 0;
				}
			}
			
			if ($Line =~ /LD\[(\d+)\] FVMP\[(\d+)\] INMP\[(\d+)\] CVMP\[(\d+)\]/)
			{
				$LD = $1;
				$fullVolMap = $2;
				$inPlaceLD = $3;
				$currentLD = $4;
				$snapSpace = $fullVolMap - $inPlaceLD;
				
				if ($fullVolMap != 0)
				{
					push @LDS, $LD;
logger(__LINE__, "Current LD is:   $LD") if ($debug);
					$FVMP{$n}{$LD} = $fullVolMap;
logger(__LINE__, "FVMP for $n in $LD is:   $FVMP{$n}{$LD}") if ($debug);
					$INMP{$n}{$LD} = $inPlaceLD;
logger(__LINE__, "INMP for $n in $LD is:   $INMP{$n}{$LD}") if ($debug);
					$CVMP{$n}{$LD} = $currentLD;
logger(__LINE__, "CVMP for $n in $LD is:   $CVMP{$n}{$LD}") if ($debug);
					$SNAPSPACE{$n}{$LD} = $snapSpace;
logger(__LINE__, "Snap for $n in $LD is:   $SNAPSPACE{$n}{$LD}") if ($debug);
				}
			}
		}
		close($fh);
	}
	else
	{
		
	}
}

@uTiers = uniq(@TIERS); 

$lastLD = 0;

if ($rev eq "3.1" or $rev eq "3.2")
{
	
	OUTER: foreach $n (@Name)
	{
logger(__LINE__, "Current Volume is:   $n") if ($debug);
		$i = 0;
		INNER: foreach $lds (@LDS)
		{
logger(__LINE__, "      last LD was: $lastLD") if ($debug);
			if ($lastLD > $lds) { $lastLD = 0; next OUTER; }
			else { $lastLD = $lds };
			$tierCheck = $INTMP{$n}{$TIERS[$i]};
logger(__LINE__, "tierCheck for $n in $TIERS[$i] is:   $tierCheck") if ($debug);
logger(__LINE__, "INMP for $n in $lds is:   $INMP{$n}{$lds}") if ($debug);
			
			if ($tierCheck == $INMP{$n}{$lds})
			{
				$tiers{$n}{$TIERS[$i]} = nearest(.01, $INMP{$n}{$lds} / 1024);
				$snap{$n}{$TIERS[$i]} = nearest(.01, $SNAPSPACE{$n}{$lds} / 1024);
logger(__LINE__, "") if ($debug);
logger(__LINE__, "Tier for $n in $TIERS[$i] is:   $tiers{$n}{$TIERS[$i]}") if ($debug);
logger(__LINE__, "Snap for $n in $TIERS[$i] is:   $snap{$n}{$TIERS[$i]}") if ($debug);
logger(__LINE__, "INMP is equivalent to tierCheck, moving to next volume...") if ($debug);
				$imp = 0;
				$i++;
				next INNER;
			}
			else
			{
logger(__LINE__, "INMP for $n in $lds is:   $inmp") if ($debug);
				$inmp += $INMP{$n}{$lds};
logger(__LINE__, "INMP for $n in $lds is:   $inmp") if ($debug);
				$tiers{$n}{$TIERS[$i]} += nearest(.01, $INMP{$n}{$lds} / 1024);
				$snap{$n}{$TIERS[$i]} += nearest(.01, $SNAPSPACE{$n}{$lds} / 1024);
				
				if ($inmp == $tierCheck)
				{
logger(__LINE__, "") if ($debug);
logger(__LINE__, "Tier for $n in $TIERS[$i] is:   $tiers{$n}{$TIERS[$i]}") if ($debug);
logger(__LINE__, "Snap for $n in $TIERS[$i] is:   $snap{$n}{$TIERS[$i]}") if ($debug);
logger(__LINE__, "INMP is equivalent to tierCheck, moving to next volume...") if ($debug);
					$inmp = 0;
					$i++;
					next INNER;
				}
				else
				{
logger(__LINE__, "Tier for $n in $TIERS[$i] is:   $tiers{$n}{$TIERS[$i]}") if ($debug);
logger(__LINE__, "Snap for $n in $TIERS[$i] is:   $snap{$n}{$TIERS[$i]}") if ($debug);
					next INNER;
				}
			}
		}
	}
}
$num = scalar(@Name);

## SMART output retrieval

@drives = `grep --color=never dev ${dump_path}pdoutput.txt`;

	foreach $d (@drives)
	{
			if ($d =~ /Disk Info for \<([\/a-z]+)\>/ )
			{
					push @drive, $1;
			}
	}

@serials = `grep --color=never -i serial ${dump_path}pdoutput.txt`;
$i = 0;

	foreach $s (@serials)
	{
			if ($s =~ /Serial No\s+: ([A-Z0-9]+)/)
			{
					$serial{$drive[$i]} = $1;
					$i++;
			}
	}

@slots = `grep --color=never -i location ${dump_path}pdoutput.txt`;
$i = 0;

foreach $s (@slots)
{
		if ($s =~ /Disk Location\s+: Controller [0-9], Enclosure ([0-9]), Slot ([0-9]+)/)
		{
				$enclosure{$drive[$i]} = $1;
				$slot{$drive[$i]} = $2;
				$i++;
		}
}

@vendors = `grep --color=never -i vendor ${dump_path}pdoutput.txt`;
$i = 0;

foreach $v (@vendors)
{
	if ($v =~ /Vendor Name\s+: ([A-Za-z0-9]+)/)
	{
		$vendor{$drive[$i]} = $1;
		$i++;
	}
}

@capacities = `grep --color=never -i capacity ${dump_path}pdoutput.txt`;
$i = 0;

foreach $c (@capacities)
{
	if ($c =~ /Disk Capacity\s+: ([0-9\.]+) GB/)
	{
		$capacity{$drive[$i]} = $1;
		$i++;
	}
}

@types = `grep --color=never -i type ${dump_path}pdoutput.txt`;
$i = 0;

foreach $t (@types)
{
	if ($t =~ /Disk Hardware type\s+: ([A-Z\-]+) Hard Disk/)
	{
		if ($1 =~ m/SSD/)
		{
			$type{$drive[$i]} = "SSD";
			$i++;
		}
		else
		{
			if($capacity{$drive[$i]} > 600)
			{
				$type{$drive[$i]} = "NL-SAS";
				$i++;
			}
			else
			{
				$type{$drive[$i]} = "SAS";
				$i++;
			}
		}
	}
}

@smart_serials = `grep --color=never -i serial ${dump_path}smart_output.txt`;
@smart_defects = `grep --color=never -i defect ${dump_path}smart_output.txt`;
@smart_errors  = `grep --color=never -i non-medium ${dump_path}smart_output.txt`;
@smart_reads   = `grep --color=never -i read ${dump_path}smart_output.txt`;
@smart_writes  = `grep --color=never -i write ${dump_path}smart_output.txt`;
@smart_temps   = `grep --color=never -i current ${dump_path}smart_output.txt`;

foreach $ss (@smart_serials)
{
		if ($ss =~ /Serial number:\s+([0-9A-Z]+)/)
		{
				push @smart_serial, $1;
		}
}

$i = 0;

foreach $sd (@smart_defects)
{
		if ($sd =~ /Elements in grown defect list: ([0-9]+)/)
		{
				$smart_defect{$smart_serial[$i]} = $1;
				$i++;
		}
}

$i = 0;

foreach $se (@smart_errors)
{
		if ($se =~ /Non-medium error count:\s+([0-9]+)/)
		{
				$smart_error{$smart_serial[$i]} = $1;
				$i++;
		}
}

$i = 0;

foreach $sr (@smart_reads)
{
		if ($sr =~ /read:\s+[0-9]+\s+[0-9]+\s+[0-9]+\s+[0-9]+\s+[0-9]+\s+[0-9\.]+\s+([0-9]+)/)
		{
				$smart_read{$smart_serial[$i]} = $1;
				$i++;
		}
}

$i = 0;

foreach $sw (@smart_writes)
{
		if ($sw =~ /write:\s+[0-9]+\s+[0-9]+\s+[0-9]+\s+[0-9]+\s+[0-9]+\s+[0-9\.]+\s+([0-9]+)/)
		{
				$smart_write{$smart_serial[$i]} = $1;
				$i++;
		}
}

$i = 0;

foreach $st (@smart_temps)
{
	if ($st =~ /Current Drive Temperature:\s+([0-9\sC]+)/)
	{
		$smart_temp{$smart_serial[$i]} = $1;
		$i++;
	}
}

$i = 0;

foreach $ss (@smart_serial)
{
		if ($ss = $serial{$drive[$i]})
		{
				$defect{$drive[$i]} = $smart_defect{$ss};
				$error{$drive[$i]} = $smart_error{$ss};
				$read{$drive[$i]} = $smart_read{$ss};
				$write{$drive[$i]} = $smart_write{$ss};
				$temp{$drive[$i]} = $smart_temp{$ss};
				$i++;
		}
}

## Pull critical events from event log
$events = "${dump_path}events.txt";
@events = `grep --color=never -i -e warn -e crit $events`;

## Check file systems
$df = $dump_path . "df.txt";
chomp($md255 = `grep --color=never 255 $df | awk '{print \$5}'`);
chomp($md252 = `grep --color=never 252 $df | awk '{print \$5}'`);

## UPS information
$ups_info = $dump_path . "ups_info.txt";
chomp($ups_check = `grep --color=never -i model $ups_info | awk '{print \$2}'`);

chomp($temp = `grep --color=never -i model $ups_info`);
if($temp =~ /Model\s+([A-Za-z0-9\-\s]+)/)
{
	$ups_model = $1;
}

chomp($temp = `grep --color=never -i status $ups_info | grep --color=never -v -i error`);
if($temp =~ /Status\s+([A-Za-z\s]+)/)
{
	$ups_status = $1;
}

chomp($ups_load = `grep --color=never -i load $ups_info | awk '{print \$2,\" \", \$3}'`);
chomp($ups_charge = `grep --color=never -i 'battery charge' $ups_info | awk '{print \$3, \" \", \$4}'`);
chomp($ups_time = `grep --color=never -i 'time left' $ups_info | awk '{print \$3, \" \", \$4}'`);

chomp($ups_min_charge = `grep --color=never -i 'min bat charge' $ups_info | awk '{print \$4, \" \", \$5}'`);
chomp($ups_timeout = `grep --color=never -i timeout $ups_info | awk '{print \$2, \" \", \$3}'`);

## LD info
$ldoutput = "${dump_path}ldoutput.txt";

@lds = `grep --color=never dev $ldoutput`;
@raid_level = `grep --color=never -i 'raid level' $ldoutput | awk '{print \$6}'`;
@spares = `grep --color=never -i spares $ldoutput | awk '{print \$7}'`;
@states = `grep --color=never -i state $ldoutput | awk '{print \$5}'`;
@disks = `grep --color=never -i 'disk name' $ldoutput | grep --color=never -v -i spare`;
@spare_disk  = `grep --color=never -i 'spare disk name' $ldoutput | awk '{print \$5}'`;


foreach $ld (@lds)
{
	if ($ld =~ /Logical Drive Info for LD <([\/a-z0-9]+)>/)
	{
		push @ld, $1;
	}
}

$s = $i = 0;

foreach $ld (@ld)
{
	$raid{$ld} = $raid_level[$i];
	
	if ($spares[$i] > 0)
	{
		$spare{$ld} = $spare_disk[$s];
		$s++;
	}
	
	$state{$ld} = $states[$i];
	
	chomp($disks[$i]);
	if ($disks[$i] =~ /Disk Name\s+:\s+(.+)/)
	{
		$disk{$ld} = $1;
	}
	
	$i++;
}

sort @ld;

## Gather Network Info
$networkinfo = "${dump_path}networkinfo.txt";
$ifconfig = "${dump_path}ifconfig.txt";

open($fh, '<', $networkinfo);

while($line = <$fh>)
{
	if($line =~ /Network Interface \(([\w\-\d]+)\)/)
	{
		$interface = $1;
		push @interfaces, $interface;
	}
	elsif($line =~ /IP Address\s+: ([\d\.]+)/)
	{
		$ip{$interface} = $1;
	}
	elsif($line =~ /Speed\s+: ([\d]+) Mbps/)
	{
		$speed{$interface} = $1;
	}
	elsif($line =~ /MTU Size\s+: ([\d]+)/)
	{
		$mtu{$interface} = $1;
	}
}
close($fh);

open($fh, '<', $ifconfig);

while ($line = <$fh>)
{
	if($line =~ /bond(\d)\s+Link encap:Ethernet\s+HWaddr ([0-9A-Z\:]+)/)
	{
		$a = $1 + 1;
		$inter = "Team-$a";
		$mac{$inter} = $2;
		push @ints, $inter;
	}
	elsif($line =~ /eth(\d)\s+Link encap:Ethernet\s+HWaddr ([0-9A-Z\:]+)/)
	{
		$a = $1 + 1;
		$inter = "NIC-$a";
		$mac{$inter} = $2;
		push @ints, $inter;
	}
	elsif($line =~ /RX packets:([\d]+) errors:([\d]+) dropped:([\d]+) overruns:([\d]+) frame:([\d]+)/)
	{
		$rxpackets{$inter} = $1;
		$rxerrors{$inter} = $2;
		$rxdropped{$inter} = $3;
		$rxoverruns{$inter} = $4;
		$rxframe{$inter} = $5;
	}
	elsif($line =~ /TX packets:([\d]+) errors:([\d]+) dropped:([\d]+) overruns:([\d]+) carrier:([\d]+)/)
	{
		$txpackets{$inter} = $1;
		$txerrors{$inter} = $2;
		$txdropped{$inter} = $3;
		$txoverruns{$inter} = $4;
		$txcarrier{$inter} = $5;
	}
	elsif($line =~ /collisions:([\d]+) txqueuelen:([\d]+)/)
	{
		$txcollisions{$inter} = $1;
		$txqueuelen{$inter} = $2;
	}
	elsif($line =~ /RX bytes:([\d]+) \([\d\.]+\ [\w]+\)\s+TX bytes:([\d]+) \([\d\.]+\ [\w]+\)/)
	{
		$rx{$inter} = nearest(.01, ($1 / 1024 / 1024 / 1024));
		$tx{$inter} = nearest(.01, ($2 / 1024 / 1024 / 1024));
	}
}

$q = scalar(@ints);	

INT: foreach $int (@interfaces)
{
	$i = 0;
	
	while ($i < $q)
	{
		if ($ints[$i] eq $int)
		{
			$mac{$int} = $mac{$ints[$i]};
			
			$rxpackets{$int} = $rxpackets{$ints[$i]};
			$rxerrors{$int} = $rxerrors{$ints[$i]};
			$rxdropped{$int} = $rxdropped{$ints[$i]};
			$rxoverruns{$int} = $rxoverruns{$ints[$i]};
			$rxframe{$int} = $rxframe{$ints[$i]};
			
			$txpackets{$int} = $txpackets{$ints[$i]};
			$txerrors{$int} = $txerrors{$ints[$i]};
			$txdropped{$int} = $txdropped{$ints[$i]};
			$txoverruns{$int} = $txoverruns{$ints[$i]};
			$txcarrier{$int} = $txcarrier{$ints[$i]};
			$txcollisions{$int} = $txcollisions{$ints[$i]};
			$txqueuelen{$int} = $txqueuelen{$ints[$i]};
			
			$rx{$int} = $rx{$ints[$i]};
			$tx{$int} = $tx{$ints[$i]};
			next INT;
		}
		
		$i++;
	}
}

#--------------------------------------------------------------------------------------------------------------

if ($debug_dir =~ /.+-([\d]+)-([\d]+)/) 
{
	$analysisFile = $analysis_dir . "/analysis-$1-$2.csv";
}
open($OUTPUT, ">", $analysisFile);

print "*******************************************************************************************************************************************************************************************************************************************************************************\n";
print "*                                                                                                                                Server Summary                                                                                                                               *\n";
print "*******************************************************************************************************************************************************************************************************************************************************************************\n";
print "Server Name: $serverName\n";
print "iTX Version: ${ver}v$rev\n";
print "root (/) filesystem usage: $md255\n";
print "log (/var/log) filesystem usage: $md252\n\n";

print $OUTPUT "Server Summary\n";
print $OUTPUT "Server Name,$serverName\n";
print $OUTPUT "iTX Version,${ver}v$rev\n";
print $OUTPUT "root (/) filesystem usage,$md255\n";
print $OUTPUT "log (/var/log) filesystem usage,$md252\n\n";

## LD output to STDOUT
$ldOutput = Text::Table->new(
		"-----------\n| LD\n-----------", "-\n|\n+", "--------\nRAID Set\n--------", "-\n|\n+", "-------------\nState\n-------------", "-\n|\n+", "---------------------------------------------------------------------------------------------------------------------------------------------------------------------\n                                                                                  Disks\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------", "-\n|\n+", "---------\nSpare   |\n---------"
);

print $OUTPUT "LD,RAID Set,State,Disks,Spare\n";

foreach $ld (@ld)
{
	if ($ld ne "/dev/md255")
	{
		chomp ($raid{$ld});
		chomp ($state{$ld});
		chomp ($spare{$ld});
		print $OUTPUT "$ld,$raid{$ld},$state{$ld},$disk{$ld},$spare{$ld}\n";
		
		$ldOutput->load(
			[ "| $ld", "|", "$raid{$ld}", "|", "$state{$ld}", "|", "$disk{$ld}", "|", "$spare{$ld}" ]
		);
	}
}

print $ldOutput;

print "*******************************************************************************************************************************************************************************************************************************************************************************\n";
print "*                                                                                                                               Critical Events                                                                                                                               *\n";
print "*******************************************************************************************************************************************************************************************************************************************************************************\n";

print $OUTPUT "\nCritical Events\n";

foreach $e (@events)
{
	if($e =~ /(\d+)\s+(\w+)\s+\[(\w+)\](.+)\<([0-9\/]+)\>\<([0-9\:]+)\>/)
	{
		$type = $2;
		$cont = $3;
		$evnt = $4;
		$date = $5;
		$time = $6;
		
		$event = "$2 [$3] $4 <$5><$6>";
		
		print $OUTPUT "$event\n";
		
		print "$event\n";
	}
}

## Drive info output to STDOUT
$smart_output = Text::Table->new(
	"-----------\n| Disk Name\n-----------", "-\n|\n+", "--------\nLocation\n--------", "-\n|\n+", "-------\nVendor\n-------", "-\n|\n+", "---------------------\nSerial Number\n---------------------", "-\n|\n+", "----------\nDrive Type\n----------", "-\n|\n+", "--------\nCapacity\n--------", "-\n|\n+", "----------\nTemperature\n----------", "-\n|\n+", "-------------\nGrown Defects\n-------------", "-\n|\n+", "-----------------\nNon-Medium Errors\n-----------------", "-\n|\n+", "-----------------\nUncorrected Reads\n-----------------", "-\n|\n+", "--------------------\nUncorrected Writes |\n--------------------"
);
	
print $OUTPUT "\nDisk Information\n";
print $OUTPUT "Disk Name,Location,Vendor,Serial Number,Drive Type,Capacity,Temperature,Grown Defects,Non-Medium Errors,Uncorrected Reads,Uncorrected Writes\n";

foreach $d (@drive)
{
	chomp ($temp{$d});
	chomp ($temp{$d});
	print $OUTPUT "$d,$enclosure{$d}:$slot{$d},$vendor{$d},$serial{$d},$type{$d},$capacity{$d},$temp{$d},$defect{$d},$error{$d},$read{$d},$write{$d}\n";
	
	$smart_output->load(
		[ "| $d", "|", "$enclosure{$d}:$slot{$d}", "|", $vendor{$d}, "|", $serial{$d}, "|", $type{$d}, "|", $capacity{$d}, "|", $temp{$d}, "|", $defect{$d}, "|", $error{$d}, "|", $read{$d}, "|", "$write{$d}" ]
	);
}

print "*******************************************************************************************************************************************************************************************************************************************************************************\n";
print "*                                                                                                                              Disk Information                                                                                                                               *\n";
print "*******************************************************************************************************************************************************************************************************************************************************************************\n";
print $smart_output;

print "*******************************************************************************************************************************************************************************************************************************************************************************\n";
print "*                                                                                                                             Latency Information                                                                                                                             *\n";
print "*******************************************************************************************************************************************************************************************************************************************************************************\n";

print $OUTPUT "\nNetwork Info\n";

$networkOutput = Text::Table->new(
	"----------------\n| Interface Name\n----------------", "-\n|\n+", "-----------------\nMAC Address\n-----------------", "-\n|\n+", "---------------\nIP\n---------------", "-\n|\n+", "------------\nSpeed [Mbps]\n------------", "-\n|\n+", "----\nMTU\n----", "-\n|\n+", "----------\nRX Errors\n----------", "-\n|\n+", "-----------\nRX Dropped\n-----------", "-\n|\n+", "------------\nRX Overruns\n------------", "-\n|\n+", "---------\nRX Frame\n---------", "-\n|\n+", "--------\nRX [GB]\n--------", "-\n|\n+", "----------\nTX Errors\n----------", "-\n|\n+", "-----------\nTX Dropped\n-----------", "-\n|\n+", "------------\nTX Overruns\n------------", "-\n|\n+", "-------------\nTX Collisions\n-------------", "-\n|\n+", "---------\nTX [GB] |\n---------"
);

print $OUTPUT "Interface Name,MAC Address,IP,Speed [Mbps],MTU,RX Errors,RX Dropped,RX Overruns,RX Frame,RX [GB],TX Errors,TX Dropped,TX Overruns,TX Collisions,TX [GB]\n";

foreach $int (@interfaces)
{
	print $OUTPUT "$int,$mac{$int},$ip{$int},$speed{$int},$mtu{$int},$rxerrors{$int},$rxdropped{$int},$rxoverruns{$int},$rxframe{$int},$rx{$int},$txerrors{$int},$txdropped{$int},$txoverruns{$int},$txcollisions{$int},$tx{$int}\n";
	
	$networkOutput->load(
		[ "| $int", "|", $mac{$int}, "|", $ip{$int}, "|", $speed{$int}, "|", $mtu{$int}, "|", $rxerrors{$int}, "|", $rxdropped{$int}, "|", $rxoverruns{$int}, "|", $rxframe{$int}, "|", $rx{$int}, "|", $txerrors{$int}, "|", $txdropped{$int}, "|", $txoverruns{$int}, "|", $txcollisions{$int}, "|", $tx{$int}
	 ]
	);
}

print "*******************************************************************************************************************************************************************************************************************************************************************************\n";
print "*                                                                                                                             Network Information                                                                                                                             *\n";
print "*******************************************************************************************************************************************************************************************************************************************************************************\n";
print $networkOutput;

print $OUTPUT "Volume Information\n";

## Analysis output to SDTOUT
if ($rev eq "3.1" or $rev eq "3.2")
{
	$analysis_output = Text::Table->new(
			"--------------------\n|   Volume\n--------------------", "-\n|\n+", "---------------------\nProvisioned Size [GB]\n---------------------", "-\n|\n+", "--------\n$uTiers[0] [GB]\n--------", "-\n|\n+", "--------------------\nSnapshots ($uTiers[0]) [GB]\n--------------------", "-\n|\n+",  "---------------\nProvision Type\n---------------", "-\n|\n+", "--------------\nTier Residency\n--------------", "-\n|\n+", "-------------------\nSSD Cache Profile |\n-------------------"
		);
	
	print $OUTPUT "Volume,Provisioned Size [GB],$uTiers[0] [GB],Snapshots ($uTiers[0]) [GB],Provision Type,Tier Residency, SSD Cache Profile\n";
	
	$i = 0;
	while ($i < $num) {
		$analysis_output->load(
			["| $Name[$i]", "|", $Name[$i]{Size}, "|", $tiers{$Name[$i]}{$uTiers[0]}, "|", $snap{$Name[$i]}{$uTiers[0]}, "|", $Name[$i]{Provision}, "|", $Name[$i]{Profile}, "|", $Name[$i]{ssd} ]
		);
		
		print $OUTPUT "$Name[$i],$Name[$i]{Size},$tiers{$Name[$i]}{$uTiers[0]},$tiers{$Name[$i]}{$uTiers[1]},$snap{$Name[$i]}{$uTiers[0]},$snap{$Name[$i]}{$uTiers[1]},$Name[$i]{Provision},$Name[$i]{Profile},$Name[$i]{ssd}\n";
		
		$i++;
	}
}
else
{
	$analysis_output = Text::Table->new(
			"--------------------\n|   Volume\n--------------------", "-\n|\n+", "---------------------\nProvisioned Size [GB]\n---------------------", "-\n|\n+", "------------------\nUsed Capacity [GB]\n------------------", "-\n|\n+", "---------------\nProvision Type\n---------------"
		);
		
	print $OUTPUT "Volume,Provisioned Size [GB],Used Capacity [GB],Provision Type\n";
	
	$i = 0;
	while ($i < $num) {
		$analysis_output->load(
			["| $Name[$i]", "|", $Name[$i]{Size}, "|", $Name[$i]{space}, "|", $Name[$i]{Provision} ]
		);
		
		print $OUTPUT "$Name[$i],$Name[$i]{Size},$Name[$i]{space},$Name[$i]{Provision}\n";
		
		$i++;
	}
}

print "*******************************************************************************************************************************************************************************************************************************************************************************\n";
print "*                                                                                                                             Volume Information                                                                                                                              *\n";
print "*******************************************************************************************************************************************************************************************************************************************************************************\n";
print $analysis_output;	

print "*******************************************************************************************************************************************************************************************************************************************************************************\n";
print "*                                                                                                                               UPS Information                                                                                                                               *\n";
print "*******************************************************************************************************************************************************************************************************************************************************************************\n";

print $OUTPUT "\nUPS Information\n";

if($ups_check eq "N/A")
{
	print "No UPS detected.\n";
	print $OUTPUT "N/A\n";
}
else
{
	print "Basic Info\n----------\n";
	print "UPS Model: $ups_model\n";
	print "UPS Status: $ups_status\n";
	print "Current Load: $ups_load\n";
	print "Current Charge: $ups_charge\n";
	print "Time Left Based on Charge: $ups_time\n\n";
	
	print "Shutdown Configuration\n----------------------\n";
	print "Shutdown Remaining Charge Reaches: $ups_min_charge\n";
	print "Shutdown After Running on Battery Power For: $ups_timeout\n";
	
	print $OUTPUT "Basic Info\n";
	print $OUTPUT "UPS Model,$ups_model\n";
	print $OUTPUT "UPS Status,$ups_status\n";
	print $OUTPUT "Current Load,$ups_load\n";
	print $OUTPUT "Current Charge,$ups_charge\n";
	print $OUTPUT "Time Left Based on charge,$ups_time\n";
	
	print $OUTPUT "Shutdown Configuration\n";
	print $OUTPUT "Shutdown (charge),$ups_min_charge\n";
	print $OUTPUT "Shutdown (Time),$ups_timeout\n";
}

print "*******************************************************************************************************************************************************************************************************************************************************************************\n";

## Clear out arrays/hashes for next use
undef @drive;
undef @ld;
=pod
%Size = ();
%Provision = ();
%Profile = ();
%Ssd = ();
%space = ();
%INTMP = ();
%tiers = ();
%FVMP = ();
%INMP = ();
%CVMP = ();
%SNAPSPACE = ();
%snap = ();
%enclosure = ();
%slot = ();
%vendor = ();
%capacity = ();
%type = ();
%smart_defect = ();
%smart_error = ();
%smart_read = ();
%smart_write = ();
%smart_temp = ();
%serial = ();
%defect = ();
%error = ();
%read = ();
%write = ();
%temp = ();
%raid = ();
%spare = ();
%state = ();
%disk = ();
%ip = ();
%speed = ();
%mtu = ();
%mac = ();
%rxpackets = ();
%rxerrors = ();
%rxdropped = ();
%rxoverruns = ();
%rxframe = ();
%txpackets = ();
%txerrors = ();
%txdropped = ();
%txoverruns = ();
%txcarrier = ();
%txcollisions = ();
%txqueuelen = ();
%rx = ();
%tx = ();
%Name = ();
=cut
$i = 0;
while ($i < $num)
{
	%{$Name[$i]} = ();
	$i++;
}

print "Analysis complete. You may find the files at ", UNDERLINE GREEN, $analysis_dir, RESET, "\n";


#---------------------------------------------------------------------------------------------------------------------#

## Debug subroutine
sub logger
{
	($line,$msg) = @_;
	
	@months = qw( JAan Fab Mar Apr May Jun Jul Aug Sep Oct Nov Dec );
	@days = qw( Sun Mon Tue Wed Thu Fri Sat );
	
	($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime();
	$year += 1900;
	
	open(LOG, ">>", "/root/debugDump.log");
	print LOG "Analysis3400: Line $line $months[$mon]/$mday/$year $hour:$min:$sec - $msg\n";
	close(LOG);
}

## Failed command check subroutine
sub cmd_chk
{
logger(__LINE__, "+++++++++++++++++++++++++") if ($debug);
	($txt,$cmd) = @_;
logger(__LINE__, "Text is $txt") if ($debug);
logger(__LINE__, "Command is $cmd") if ($debug);

	$rem = $columns - length($txt) + 9;
	
logger(__LINE__, "Checking command...") if ($debug);
	if (system($cmd) != 0)
	{
logger(__LINE__, "Command failed") if ($debug);
		printf("%${rem}s\n",colored('Failure!', 'RED'));
logger(__LINE__, "+++++++++++++++++++++++++") if ($debug);
		next;
	}
logger(__LINE__, "+++++++++++++++++++++++++") if ($debug);
}

## Success print subroutine
sub my_print
{
logger(__LINE__, "~~~~~~~~~~~~~~~~~~~~~~~~~") if ($debug);
	($txt,$nxt) = @_;
logger(__LINE__, "Text is $txt") if ($debug);
logger(__LINE__, "Next text is $nxt") if ($debug);

	$rem = $columns - length($txt) + 9;

logger(__LINE__, "Printing 'Success'...") if ($debug);
	printf("%${rem}s\n",colored('Success!', 'GREEN'));
	print $nxt if ($nxt ne '');
logger(__LINE__, "~~~~~~~~~~~~~~~~~~~~~~~~~") if ($debug);
}

## Find unique entries in array
sub uniq {
  my %seen;
  return grep { !$seen{$_}++ } @_;
}
